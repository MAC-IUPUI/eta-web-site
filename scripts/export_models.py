import os
import utils

def process_file(filename):
    handle = open(filename, "r")
    lines = handle.read().replace("\r", "").split("\n")
    handle.close()
    real_lines = []
    for line in lines:
        line = line.replace(" default ", " ")
        raw_line = line.strip()
        if raw_line.startswith("@") or raw_line.startswith("import ") or raw_line == "":
            continue
        if raw_line.startswith("export ") and raw_line.endswith(";"):
            continue
        real_lines.append(line)
    return real_lines

def process_dir(dirname):
    files = os.listdir(dirname)
    contents = []
    for filename in files: # Ensure that "I..." classes are put first
        if filename.startswith("I"):
            files.remove(filename)
            files.insert(0, filename)
    for filename in files:
        if filename == "index.ts" or not filename.endswith(".ts"):
            continue
        contents += process_file(dirname + filename)
    return contents

def main():
    server_dir = utils.get_server_dir()
    lines = ['import * as linq from "linq";']
    lines += process_dir(server_dir + "db/interfaces/")
    lines += process_dir(server_dir + "db/models/")
    comment = "// This file is automatically generated by /scripts/export_models.py.\n"
    raw = comment + "\n".join(lines)
    out_file = server_dir + "static/js/lib/Models.ts"
    handle = open(out_file, "w")
    handle.write(raw)
    handle.close()
    print("Wrote output to {}. Compiling client-side Typescript...".format(out_file))
    os.chdir(server_dir + "static/js")
    utils.compile_ts()
    os.chdir(server_dir)

if __name__ == "__main__":
    main()
